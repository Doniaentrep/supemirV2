version: '3.8'

services:
  # Main application service for production
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: supemir-app-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
    env_file:
      - .env
    volumes:
      # Mount logs directory for persistent logging
      - ./logs:/app/logs
      # Mount SSL certificates if needed
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # Resource limits for production
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    # Security options
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp

  # Optional: Add a database service if needed
  # database:
  #   image: postgres:15-alpine
  #   container_name: supemir-db-prod
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: supemir_prod
  #     POSTGRES_USER: supemir_user
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./backups:/backups
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U supemir_user -d supemir_prod"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Optional: Add Redis for caching
  # redis:
  #   image: redis:7-alpine
  #   container_name: supemir-redis-prod
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - app-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

networks:
  app-network:
    driver: bridge

volumes:
  logs:
    driver: local
  # postgres_data:
  #   driver: local
  # redis_data:
  #   driver: local
